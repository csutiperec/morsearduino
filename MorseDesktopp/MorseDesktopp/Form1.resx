<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIADuFQAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgEAAAA9ntg7QAAFbVJ
        REFUeNrtnXt0U1W+x3/n5J02bZo00EdSaLFpgaalTHEUKSCglnVVcC5gUddQpPTq+ACWCCque3VG57pm
        XBd0jc97R68uKbOUGcsVBZ9QBAEflZbyaME+aNOEtglp2qRJ89j3D8bRyfMkTbvPOdmf33/n7JPss3/f
        s/c++/E7AAQCgUAgEAgEAoFASCIo3BmYLBDdIfhWapUMiZ1Sr9Qn8Yl9Qj/tpwFoP+0XeAVjArfQJXel
        j6ncFa4CL4Vw53hy4K0AEHVQ2pY2oLZlObJGs53Zbo1L7VZ6UjwpXplX5BP6hIhGFFAAgChE+QVegVfo
        EY6KHKIRyZB0UDIoN8lMKeY0s8Yyy36Li6+C4JkAmoTHlT3ZgzOGC+0z7DOcOU61Q+GSjtEe8IIf/MDE
        ixTQQIMQRCDxS1yyYblFYVJ0pbYrL6g6tMZFtlIv7rtMJDwRwHvyFm1/8aDhStmQ3p4zrHSK3OABf4J+
        nQYhSEHuSR1KM2ZcyGjJOJXVNttY7cB914mA4wLYL/1G21d2+TrLXKveNmVEPAoT/XgKQQYpYxkD6nbV
        d5oT2uY5vXe4cJfCeOCoABD1ckb7TFPl5cqBEmu2XeRK2NPOFBqkoPCozZrWKUdyjhWeeeAKN3sJnBOA
        k3o182K58SbTov4ia5oDfJjzI4AUUA1POZ99JPfTwqb7B6UckwGnBPCS8lx573LjTSb9FbmTUYdusqBA
        Bmrn1Pacz6YdLP7uARvu/MSSc07QID5e3LX80u3GUksqu1z/cyiQQ+ZIdnPeh/kf3XDu9jHc+WGWZ9bz
        grp1YdeaS4vNU4epyW7p44EGBcq6nNc47d3ZR7YM4s5NNFgtgA76rfz2lR2re8oGpZx4nH6GGDLdupb8
        d/UNazpKWKxb1grgY9Hnhra7O1b05g/RLC6/iNCQ7td2FzTody9u+RcP7tyEhpUCaBAfnte+vuPW3qkO
        1rb3zEkBbf+M/YVvLvr6VyysxlgngAbxoWvbai/ealSP4s5KApFBrvWaD4v+e9FJtomAVQI4JPxwztn7
        2u/oVXF6cC0MUtBaCxtmvXZr0428mk1IEIjaUbxiV5FJjoDHJkNF5hU7n5iJWPXgsYDnsqq3l11UYHfQ
        ZFgqKv2hevt/ZuEuc9bwhqx29fXH1V4Ku2smyyik9l5/YuOdb8pxlz12ELVtTtVunUOA3SmTbQKkc9xS
        /2h5UjcGu1Rrt5Z0ybA7A5fJUEn32q07Vbj9gAUjvXnBjQc1nuSp+EMZhTSexQc3VV6gcftjktmVUf14
        sUmM3QFsMDEqNt/5eBLVA4jaWrHkg2R/9n9uFMr0LPnwkYqk6A/US2tqS7uk2AudbSZBhq6aje/IcPtn
        gvmd9rZXtQ4ae3Gz0Sikdd726m91uH00YSBqy/wFX6b5cRc0my3Nv+Dolht42RS8L1pfU9JNun3RTIxK
        Lq2vaRDj9leC2aVc9cw0O6n6mRiFpg2venaXErfPEsjT06rqNR7cBcsly/RU7Xl6Gm6/JYhHyysPJ8c0
        TyJNgRY2bivH7bsE8ODSijMS7MXJRZOgijMPLsPtv3HhputWG7qF2IuSqyZEJZfq1ni4Okz8jbCmVj9A
        On7jMRrpB2pqjwtx+zIOGsR3byqwkeHe8RqFCmz3bObca+FeydrteSO4C48vljey9rH3JLh9GgP1kuod
        OgfuYuOTaR13PrmHKxL4m6R6h9aJu8j4ZlrnnU/u5YIE9ovXbidP/0SYzrH2sf1s7wu0CO/ZTNr+ibK8
        kbs3N7P5jQDRNbUFNtzFxGcrsNXUooSOCwgS+WOmVV/u/CF5ljZhwCZ1zj/d2XQWdz5C8tAyQzcZ9plo
        o1FJ90NsHCDeVl7RSgZ9J8OEqKI1cdNECWoCfjvtyKvfz2PZxlee4gfrFFR876HDQ7hz8g9eUlbVkwnf
        yTQFqqp/SYnb73/nsGjVsxov7iJJNtN4Vz3TKBq/9xLQBFDrjj3VJ8Utw2TDSTvmDvWeOoU7H7DlBkM3
        mfPDYRQydG+5Ybz+G2cN8IzuyMstpbijdSYrtnSqsO6zL+zj+Y1xjSrtlZ3c0VJJ+v64GIOWypNP7B1X
        8zuuGkC+/qvHBhLQESHEixucs73GU01Y/nzrPEMnaf1xG4VKO7fOi9+LcdcAf1J98ULztSTcFX6GlMLs
        Rw5+FGdgtTj7AIg6et/pKj4Gc+MeLji9/Oh98e4njLMGGKo89sfuNNy3TriKk/bNuvj1iUvxXBtXDfCi
        6tSOH7Jx3zbhJzqym594Ma6J+LhqAOUDJ+uGubpdgZf4wJEvtrR+FfuVcQhgW/lX/9WVgfuWCf/MKA1F
        NY3HzLFeF/Nz/K68eevFadyP4c03EFyc1rL1vZhDzMRcAyjvOP6YhQz+sBAvuAuo801nYrsqxhrgD9mt
        W/pIgFOW0pfSuuWPMcYgjrEGUD/4za8dfIxgwwsQjObILK3HYrkmphpgx8xztVbS+2cxVvpc7Y6ZsVwR
        gzuRoPXfOmaQ7h+bQdBxTWsdiqFejyHpyLzjz/Sl4r5FQmTGgJre1XjcyDQ94xrgtOhc3SXykQMOcCnr
        XF0r4/c0xjWA+IYTT10m/X8O4AE0bfjYSYYzAwxrgO9F7RuMaty3RmCGUd22oZlhHcCwBpDNP/Hv/eT5
        5wheAJ3zKLPZQUY1wICwvYY8/1zCqG5fN8RoIzmzGmDuif8wk/4/h/CCIOfyF1+ZoqdkUAMgqv0uI+n/
        c4zerPa7mKwSYlIDFB5/podM/3KMMZBMufxRozVaOgY1QNuKngLct0OInZ4ZbSujp4oqgBcyu1azZx8y
        gTlD0LXqxcxoqaIKoHXhpTI/7nshxIEfeuacXhgtVRQBnBJ3rR7kQnQ6QggGJF2rm6MElosigD0zLy0m
        e/+4yhj0LNpTHDlNFAF0LjeTF0AOY87uXB45RUQBvKbsuXUY9z0QxoEdLt36ujJSiogCOP2LPtIB5DR+
        6Cs7PTdSiogC6KkaJAPAHGdQcakq0vkIAtg5xbjMiTv/hHHihL5luzThz0cQwIW5l/VkBSDXQWAuao/Q
        CEQQgHGplawA4AFWuXFp+LNhBfCyyrSINAB8wAmmRa+E3TkcVgBts/qLSAPABxAMFLWF3SsQVgB9lVYS
        AIInWNP7KsOdCyOAL6T9Cxy4801IECNweUFjmGByYQTQqBsoIeEf+YIPBkoOaUOfCyMAY5mVhIDhEdac
        3rLQZ8IIoP+XdhIDgEfYRQO/DH0mpAD+lmKZS0LA8QkXWOY2pIQ6E1IAp3KtejIJxCf8YClqyg11JqQA
        zMW2KbizTEgstinmolDHQwrAWjrC9i9UEmJkRGwtDXU8hACQ0Fo6iju/hAQzCtYyFGKzWAgB/Ek5pCdB
        oPmGF4YKQ31mKoQAjDn2HNzZJSQee25vCL+GEIClYFiJO7OExDOstITY4RVCAEOFTjIIxEOcoqHC4KMh
        BGAvdOPOK2ECcMPwNcFHgwTwiWw434M7r4QJwAPDBZ8GxRIOEkBrmiOHjALyET+MZLcGrfEIEsCg2kmC
        wfAUp3ogaGlYkACGspwK3BklTAzOtKGgjX5BAnBkuch3gHmKW+qILoDR7DESDpqnuOnRoGU+Qc52ZpN3
        AL7iAWc0ASDarSHzAHzFC25NYOSwAAH0CFxq8hLIV/zgVhsDZgQDBHBc6k4nAuArfnApjwUE/AkQgFXi
        UZD9QHwFgSf1SsA7XoAAhsSeFOY/SOAa3hRbwFqvAAE4pV4yCsBjPDJn5BrAI/WSqWAe4xV5IwvAL/Ex
        CjJO4CY+oS9yE+ATEwHwGZ/AF/ktwCdEZCCYxyDaHxAfPrAJoJnEmCdwFUT7ogkAiAD4DOUP8Dip8JOc
        QD34gQwE8hlEB4z0BwmAIgLgMZRfEBD4JUAAAi9F5oJ4DOWnA2b7AwUwJiDLAXiMwCcI+PxDoADcRAB8
        RuCNIgChS0hWhPEYoUcYEPsnQAByl4iEBuAxotGUyAJIHxOS+JA8RuhIj9wEqNyiETIUyFcoEI2oItcA
        813SITI4yFdokNoq3YHH/gmtT2IhAuArNEgsWZHHASi/ZIAsCOArQpAMBI70Bj3uchNZE8ZXRCA3BR4L
        EoDMJCaDwTxF4pdFF0CKWUrCBPMUiSvVHHgsSADpZjn5WChPkdvTogsg0yK34M4oYWKQWzTWwGNBAiix
        p/SRF0E+QkOqyWAPPhrAzaOKTvIewEdEoOhYFjTTE+JhT7sgYfJ7BI4hAcWF4KMhBJB+QU6mhHmI3JPO
        TADqDoUNd2YJiUdhU3cEHw0hAG1fmhF3ZgmJJ82oNQUfDSGAB2zpF8h8AN8QgrL9AVvw8RACoLyqFlnU
        HyRwCxlktFAh1nuGfOVXtaSORftBArdIdatbQh0PKYCp55X9uDNMSCzKgaltoY6HFEC5UdVORgP5BA3q
        trnG0GdC8CuHuomECuITUlA3rQy53DfMgz7lZBoZDOIRaR7NidBnwgggt1llAgJvUPXltoQ+E0YAi3o0
        rQIg8AMBaE4v7Q19LowAlrimfkkiRvKFVJh6dGGYdV5hO/vZR1V2IPAC1VDO0XDnwgqg+OyU82SPEB+g
        QNNWdDbc2bACuN+a3SjHnXdCApBD9uH7r4Q7G2G8J/dzlRN35gnjR+XM/Tz82QgC0H8/tY00AlyHgqzz
        Rd+HPx9BAJv7cz8jjQDXkUPuZ5sGwp+POOSvO5g5gvsGCOMjc1j3caTzEQVQ2pTTTCaFuAwNOc2Gpsgp
        IlBny9ufBgTukgZ5++tskVJEecDzD2SROQEOk2XKPxA5RRQBrD2naxQDgZuIIe/w3ecjp4kigLKx/Pc0
        biBwEo1r+l5DlMV9Uft4JUd0p0hHkIvQoGsuORI9VRQeHpy+Nx33vRDiQIny33t4MFoqBg93UYPuB9w3
        Q4gdbYd+X/RUDATw1A/5+1Jx3w0hRlKhoOEpBg8uAwFQSF+vNUdPR2ATWnNhPZNvPzDq3z3ZXLCf7BXi
        EjKY8cFTLUxSMhJAulf/Vi4JHMMhtJbCt1MYBf5n+IZ378lCUgdwBhlc88G9J5mlZSiAUo/+z6QO4Apa
        S9GfSxnu62A8xlN3Qt9AVgdwATkUvn8fw+c/BgHM9sx8PY+8C3CAPPPM14sZ7+uKYZT3+e+K/qLAfXeE
        KCig6C/PNzFPH4MAKJ/h9YKLZJUgm6Gg4KLhNcrH/IqY9n8dGbxRbloySjTAWtT+6/7wMoMB4J+IcaJv
        7lv6k2TPIFsRQNHJuW9P8J9sXKMbAUSMjZY3snF1rP6Mear/5g9m7SNDQmxEDrMaqvbHelXMAlg9Wvb8
        NV2kG8A2KJjRVfr8v8b81cc4GvRj5mUi81InWSbEKqb4rv/9q+/Hfl1cbrzujZJPSUBpNiGB2Z9c/+Yk
        /uGWBTP7cHd5iP1kM/s2L5hUxSGq+nGNF/dtE7tqGm/1YyjOblmcLTmFFrxaeoCEkmMDUig9sOA1Jqt/
        EszWeaWdFHb1J7tRqLTj0QpM2qup1TpxF0Cym9ZRUzseH47rZe62d8rfInsGcJIOc9++/R2MGXhGV3lE
        jP0pSFYTo8rGZ7WYNbhlvqGL9ARwGIUMXVvmY3Y/AMD6mul23IWRjDbdfu+68XsvAQO6G3ZXvKiJYQkC
        IRFofPNeXF+POxd/5yVlVb0C+xORTKZAVbtfUuL2+894Om/hISn2YkkWk6KFh57Ow+3zALaVV7QKsRdN
        MpgQVZzeVo7b3yF4eKmhi8ZePHw3Ghm6H1qK29dhqFut7yevhBNpFNL318W87GvSQHTNhoIruAuJz1Zg
        q6lFbF6Kc05wz6a8YdzFxFebNnzPpjNs/6jrfvHa7ToH7qLio+kca7d/yIWYfe9LqneQWcJEm9ZZveOv
        XFmHt0dS/QSpBRJpOkf1k3u44n4AgL+K79o+bZi8ESTCKJQ3vHb7e1xyPwDAPvE9mwpsRALjd3+B7Z7N
        +7jQ9gfyjXD9Bv0AGRoaj9FIP1BTe4LtPf9w+Om6VYZuMkAcrwmRobtuNavf+6Pz0NKKVgn2ouSiSVFF
        K2sHfWNh25yFh8hkcaymQAsPb2fjlE88/Davql7jwV2kXDKNp6p+ciZ8JyXaw6GhBz8X+J3ldsnk717g
        HjTkDc/fuWTHY5dx5yShNIjWrzN0kRXE0UyMDN3r1zVw8bUvOluur2xM9+MuYjZbmr/yyOSu9J3UgD8n
        ejd+JpI7Zo2ISFMQDAXa0eveWLjp92dw52RCqZfWbCjtJOsHA02KDJ3rat9Jhug7iNr6iyUfaDxkmPhH
        o5DGs2T/VlxbPHHwQkb148UmMkAECJAYzTRVP74rA7dPJpkeevMNNx5I9nqAQhrP4oObF1zk9nBvvOxU
        3fWIoUuG3Q24TIYM3Xc9skuF2w8YQdS2sqrduhEBdmdMtgmQzlG1e9uceEO78Ig3ZBtXzf9K7U2exoBC
        au/1xzeufiMZ+vzMeC6relvZheSYMkpFZRertz+XhbvMWQainixasbPIJMfuoIk0GSo2r9j5RDF7Kn7W
        ZAQA4EvBvvKz97WvNKpjjnjKAaSgtegbZr522/eLGX3Pa3JglQAAABrEh69t23Dxtl5eiUAGuZbC/fr/
        ufHrlWPj/7VEwjoBAAD8n/iLee2/7ri9N8sBXJ81oCAFcs0z9uv/d/E3bHP+1fyxlE+Fnxja7+5c2Ztv
        o/24MxMnNKT7dV35Dfrdy1puYVG1/3NYKwAAgB/ot/PbV3au7ikbkLLw4YmIGDJdeaenv1vUsKZjNosV
        zGoBXOUF9ZmFnWt6Fpmz7BSLS/If0JCGsi7rGqe/O+vIlkHcuYkGBwQAALBPfLyoc3nP7cbSQYWTtf0C
        CuSQOZLTrPug4MCC87dyotLiiACu8nL62fLe5cabzEVWObtkQIEcVM6pbbmf5x2Y2fQbG+78xJJzjuGm
        XlG3l/ctMy3uL7KmjcTyibwJQQApoLJPacs+nPtZ4febBzFE7R4XnBPAVRD1irK9uK/ycuWAwZpjF7lg
        snsHNEghzaMyZZ6eejT3aOHZ31zhmuuvwlEB/MhByQmtsaz/usG5Vv3Q1GHxKEz025YQZJA6puxXt6u/
        zTypba4w3ubCXQrjgeMC+JG98pbcy8WWUmvpkH44x57hFLnBk7BagQYhSEHuSbWlGTMuZjRnNGefLzGu
        ceK+60TAEwH8yCnhMWVPtqXAXjg0Y3iGM8eZ6VS4pG7aA17wg59Rx5ECGmgQgggkfolLZpdbFKbUTsUF
        5QV1R27fYpuBpUM68cEzAfwEoj6Wnk8bVNmyRrJGc5xZbo1L7VZ6Ur0pHplX5BP6BIhGNFAAgCg/5Rf4
        BF6hRzQqdIhGpDaJRTIgN8lMKeZ0c6Z1tv1mFzdb+OjwVgCBIKpD+K3kitQmdkq9Up/YJ/EJ/AI/DUD7
        BT7aJ3ALxkQuuSt9LMNV4S7w8tXhBAKBQCAQCAQCgUBIav4fywt2t+fJFe4AAAAASUVORK5CYII=
</value>
  </data>
</root>